stages:
  - build
  - test
  - analyze
  - package
  - deploy

image: maven:3.9.7-eclipse-temurin-21 # Das ist das Image, das für alle Jobs verwendet wwerden soll

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=./.m2/repository" # das ist der Pfad wo das Maven Repository gespeichert wird, eine Globale enviroment variable die für alle Jobs gilt
  SONAR_PROJECT: "ConnectFour"                      # das ist der Name des Projekts in SonarQube

build: # Das ist der name des Jobs und jeder job gehört zu einem Stage (bspw wenn build nur für win dann build-win)
  stage: build
  tags:
    - docker
  script:
    - mvn compile
  artifacts: # sind ergebnisse eines jobs die an andere jobs weitergegeben werden (WICHTIG! funktioniert bei uns auch ohne aber nur weil wir einen runner haben)
    paths:
      - "target/*" # target ist der standard output ordner von maven
    expire_in: 2 days # wie lange die artifacts aufbewahrt werden sollen
  cache:
    paths:
      - ".m2/repository" # Maven Repository wird gecached somit muss nicht jedes mal alles neu heruntergeladen werden

# leere Zeile ist notwendig um die Jobs zu trennen

test:
  stage: test
  tags:
    - docker
  dependencies:
    - build # das bedeutet das dieser Job auf die artifacts des build Jobs zugreift
  script:
    - mvn test
  artifacts:
    paths:
      - "target/surefire-reports/*"
      - "target/site/jacoco/*"
    expire_in: 2 days
  cache:
    paths:
      - ".m2/repository"

analyze:
  stage: analyze
  tags:
    - docker
  dependencies:
    - build
    - test
  script:
    - mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.sonar_project=$SONAR_PROJECT -Dsonar.token=$SONAR_TOKEN
  cache:
    paths:
      - ".m2/repository"

package:
  stage: package
  tags:
    - docker
  dependencies:
    - build
  script:
    - mvn package
  artifacts:
    paths:
      - "target/*.war"
    expire_in: 2 days
  cache:
    paths:
      - ".m2/repository"

deploy_test:
  stage: deploy
  tags:
    - shell
  dependencies:
    - package
  #when: manual # das bedeutet das dieser Job manuell gestartet werden muss (Knopfdruck)
  script:
    - docker rm --force tomcat # löscht den container tomcat (wenn der schon existiert)
    - docker image rm --force connect-four # löscht das image connect-four (wenn das schon existiert)
    - docker build -t connect-four . # baut das image connect-four
    - docker run --rm -d --name tomcat -p 8080:8080 connect-four # startet den container connect-four
  environment:
    name: test # das ist der name der Umgebung
    action: start # das ist die action die in der Umgebung ausgeführt wird
    url: http://localhost:8080/ConnectFour/ # das ist die url der Umgebung
    on_stop: deploy_test_stop # das ist der name des Jobs der ausgeführt wird wenn die Umgebung gestoppt wird

deploy_test_stop:
  stage: deploy
  tags:
    - shell
  when: manual
  script:
    - docker rm --force tomcat # löscht den container tomcat
    - docker image rm --force connect-four # löscht das image connect-four
  environment:
    name: test
    action: stop

